{"version":3,"sources":["components/Header.js","components/Categories.js","components/NewsItem.js","components/NewsList.js","lib/usePromise.js","pages/NewsPage.js","App.js","serviceWorker.js","index.js"],"names":["Header","styled","div","HeaderWrap","categories","name","text","CategoriesBlock","Category","NavLink","Categories","map","c","key","activeClassName","exact","to","NewsItemBlock","NewsItem","article","title","description","url","urlToImage","className","href","target","rel","src","alt","NewsListBlock","NewsList","category","promiseCreator","deps","useState","loading","setLoading","resolved","setResolved","error","setError","useEffect","a","async","process","usePromise","query","axios","post","response","articles","data","NewsPage","match","params","App","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.922d8e33.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Header = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content:center;\r\n  align-items:center;\r\n  padding: 1rem;\r\n  box-sizing:border-box;\r\n  background:#00B8E1;\r\n  color:#fff;\r\n`;\r\n\r\nconst HeaderWrap = () => {\r\n  return (\r\n    <Header>\r\n      Today News\r\n    </Header>\r\n  );\r\n};\r\n\r\nexport default HeaderWrap;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst categories = [\r\n    {\r\n        name: 'all',\r\n        text: '전체보기',\r\n    },\r\n    {\r\n        name: 'business',\r\n        text: '비즈니스',\r\n    },\r\n    {\r\n        name: 'entertainment',\r\n        text: '엔터테인먼트',\r\n    },\r\n    {\r\n        name: 'health',\r\n        text: '건강',\r\n    },\r\n    {\r\n        name: 'science',\r\n        text: '과학',\r\n    },\r\n    {\r\n        name: 'sports',\r\n        text: '스포츠',\r\n    },\r\n    {\r\n        name: 'technology',\r\n        text: '기술',\r\n    },\r\n];\r\n\r\nconst CategoriesBlock = styled.div`\r\n    display: flex;\r\n    width: 768px;\r\n    margin: 0 auto;\r\n    box-sizing: border-box;\r\n    @media screen and (max-width: 768px) {\r\n        width: 100%;\r\n        overflow-x: auto;\r\n    }\r\n`;\r\n\r\nconst Category = styled(NavLink)`\r\n    font-size: 1rem;\r\n    cursor: pointer;\r\n    white-space: pre;\r\n    text-decoration: none;\r\n    color: inherit;\r\n    padding: 1rem;\r\n    box-sizing: border-box;\r\n\r\n    &:hover {\r\n        color: #495057;\r\n    }\r\n\r\n    &.active {\r\n        font-weight: 600;\r\n        border-bottom: 2px solid #22b8cf;\r\n        color: #22b8cf;\r\n        &:hover {\r\n            color: #3bc9db;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Categories = () => {\r\n    return (\r\n        <CategoriesBlock>\r\n            {categories.map(c => (\r\n                <Category\r\n                    key={c.name}\r\n                    activeClassName=\"active\"\r\n                    exact={c.name === 'all'}\r\n                    to={\r\n                        c.name === 'all'\r\n                            ? '/News_Feed/'\r\n                            : `/News_Feed/${c.name}`\r\n                    }\r\n                >\r\n                    {c.text}\r\n                </Category>\r\n            ))}\r\n        </CategoriesBlock>\r\n    );\r\n};\r\n\r\nexport default Categories;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst NewsItemBlock = styled.div`\r\n    display: flex;\r\n    @media screen and (max-width: 768px) {\r\n        width: 100%;\r\n        display: block;\r\n    }\r\n    .thumbnail {\r\n        margin-right: 1rem;\r\n        img {\r\n            display: block;\r\n            width: 160px;\r\n            height: 100px;\r\n            object-fit: cover;\r\n            @media screen and (max-width: 768px) {\r\n                width: 100%;\r\n                margin-bottom: 0.5rem;\r\n            }\r\n        }\r\n    }\r\n    .contents {\r\n        h2 {\r\n            margin: 0;\r\n            a {\r\n                color: black;\r\n            }\r\n        }\r\n        p {\r\n            margin: 0;\r\n            line-height: 1.5;\r\n            margin-top: 0.5rem;\r\n            white-space: normal;\r\n        }\r\n    }\r\n    & + & {\r\n        margin-top: 2rem;\r\n    }\r\n`;\r\n\r\nconst NewsItem = ({ article }) => {\r\n    const { title, description, url, urlToImage } = article;\r\n    return (\r\n        <NewsItemBlock>\r\n            {urlToImage && (\r\n                <div className=\"thumbnail\">\r\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <img src={urlToImage} alt=\"thumbnail\" />\r\n                    </a>\r\n                </div>\r\n            )}\r\n            <div className=\"contents\">\r\n                <h2>\r\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        {title}\r\n                    </a>\r\n                </h2>\r\n                <p>{description}</p>\r\n            </div>\r\n        </NewsItemBlock>\r\n    );\r\n};\r\n\r\nexport default NewsItem;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport NewsItem from './NewsItem';\r\nimport axios from 'axios';\r\nimport usePromise from '../lib/usePromise';\r\n\r\nconst NewsListBlock = styled.div`\r\n    box-sizing: border-box;\r\n    padding-bottom: 3rem;\r\n    width: 768px;\r\n    margin: 0 auto;\r\n    margin-top: 2rem;\r\n    @media screen and (max-width: 768px) {\r\n        width: 100%;\r\n        padding-left: 1rem;\r\n        padding-right: 1rem;\r\n        font-size: 0.8rem;\r\n        margin-top: 0;\r\n    }\r\n`;\r\n\r\nconst NewsList = ({ category }) => {\r\n    const [loading, response, error] = usePromise(() => {\r\n        const query = category === 'all' ? '' : `&category=${category}`;\r\n        return axios.post(\r\n            `https://newsapi.org/v2/top-headlines?country=kr${query}&apiKey=77b22cca25e1454281497e59e5be6992`,\r\n        );\r\n    }, [category]);\r\n\r\n    // 대기중일때\r\n    if (loading) {\r\n        return <NewsListBlock>대기중...</NewsListBlock>;\r\n    }\r\n    // 아직 response 값이 설정되지 않았을 때\r\n    if (!response) {\r\n        return null;\r\n    }\r\n    // 에러가 발생했을 때\r\n    if (error) {\r\n        return <NewsListBlock>에러 발생!</NewsListBlock>;\r\n    }\r\n\r\n    // response 값이 유효할 때\r\n    const { articles } = response.data;\r\n    return (\r\n        <NewsListBlock>\r\n            {articles.map((article) => (\r\n                <NewsItem key={article.url} article={article} />\r\n            ))}\r\n        </NewsListBlock>\r\n    );\r\n};\r\n\r\nexport default NewsList;\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport default function usePromise(promiseCreator, deps) {\r\n  // 대기 중/완료/실패에 대한 상태 관리\r\n  const [loading, setLoading] = useState(false);\r\n  const [resolved, setResolved] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const process = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const resolved = await promiseCreator();\r\n        setResolved(resolved);\r\n      } catch (e) {\r\n        setError(e);\r\n      }\r\n      setLoading(false);\r\n    };\r\n    process();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, deps);\r\n\r\n  return [loading, resolved, error];\r\n}\r\n","import React from 'react';\r\nimport Header from '../components/Header';\r\nimport Categories from '../components/Categories';\r\nimport NewsList from '../components/NewsList';\r\n\r\nexport const NewsPage = ({ match }) => {\r\n  // 카테고리가 선택되지 않았으면 기본값 all로 사용\r\n  const category = match.params.category || 'all';\r\n\r\n  return (\r\n    <>\r\n      <Header/>\r\n      <Categories />\r\n      <NewsList category={category} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewsPage;\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport NewsPage from './pages/NewsPage';\r\n\r\nconst App = () => {\r\n    return <Route path=\"/News_Feed/:category?\" component={NewsPage} />;\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root'),\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}